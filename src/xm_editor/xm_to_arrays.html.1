<html>
	<head>
		<script src="3rdparty/jDataView/src/jdataview.js"></script>
		<script src="lib/arrays.js"></script>
		<script src="lib/dictionary.js"></script>
		<script src="lib/base64.js"></script>
		<script src="synth/synth_xm_reader.js"></script>
		<script type="text/javascript">
			function _log(s)
			{
				console.log(s);
				document.getElementById("log").innerHTML += s + "<br/>";
			}
			
			function process_file(event)
			{
				// file == event.target.result
				
				var xm_reader, xm, channels, i, j, k, a, b, s;
				
//				try
//				{
					xm_reader = new SynthXmReader();
					if (!xm_reader.readFile(event.target.result))
					{
						_log("Failed to open file, see console log for details");
						return false;
					}
					xm_reader.unpackPatternRows();
					xm = xm_reader.getXmStructure();
					
					// prepare channels array
					channels = [];
					for (k=0; k<xm.header.number_of_channels; k++)
					{
						channels.push({ instrument: 'unknown', sample: 'unknown', data: [], base_note: -1, is_unused: true });
					}
					
					// load channel data
					for (i=0; i<xm.header.number_of_patterns; i++)
					{
						for (j=0; j<xm.patterns[i].data_unpacked.length; j += xm.header.number_of_channels)
						{
							for (k=0; k<xm.header.number_of_channels; k++)
							{
								a = xm.patterns[i].data_unpacked[j + k];
								
								if (a[0] != 0)
								{
									channels[k].is_unused = false;
								}
								
								channels[k].data.push(a[0]);
								
								if (a[1] != 0)
								{
									channels[k].instrument = xm.instruments[a[1] - 1].name;
									channels[k].sample = xm.instruments[a[1] - 1].samples[0].name;
									channels[k].base_note = xm.instruments[a[1] - 1].samples[0].relative_note_number; // + xm.instruments[a[1] - 1].samples[0].finetune / 16 / 4 / 2;
								}
							}
						}
					}
					
					s = "[\n";
					s += "\t" + Math.round(1000 / ((xm.header.default_bpm / 60) * (xm.header.default_tempo / 2))) + ", \n";
					s += "\t[\n";
					for (i=0; i<channels.length; i++)
					{
						if (channels[i].is_unused)
						{
							continue;
						}
						
						// s += "\t\t[ /* " + channels[i].instrument + " */, ";
						s += "\t\t[ /* " + channels[i].sample + " */, ";
						s += (channels[i].base_note * 2) + ", [ ";
						for (j=0; j<channels[i].data.length; j++)
						{
							if (channels[i].data[j] == 0 && j < channels[i].data.length - 1)
							{
								s += "";
							}
							else
							{
								s += channels[i].data[j];
							}
							if (j < channels[i].data.length - 1)
							{
								s += ",";
							}
						}
						s += "] ]";
						if (i < channels.length - 2)
						{
							s += ",";
						}
						s += "\n";
					}
					s += "\t]\n";
					s += "]\n";
					document.getElementById("output_instrument_titles").innerHTML = s;
//				}
//				catch (e)
//				{
//					console.log("Exception: " + e);
//					_log("Failed to open/process file, see console log for details");
//					return false;
//				}
				
				_log("File was successfully loaded.");
			}
			
			function file_upload(obj)
			{
				var reader = new FileReader();
				reader.onload = process_file;
				reader.readAsArrayBuffer(obj.files[0]);
				
				obj.style.display = "none";
				
				var div = document.createElement("div");
				div.innerHTML = obj.value;
				document.getElementById("files").appendChild(div);
				
				var upload = document.createElement("input");
				upload.type = "file";
				upload.onchange = obj.onchange;
				document.getElementById("files").appendChild(upload);
			}
			
/*
			function process_files()
			{
				if (!xm_converter.processFiles())
				{
					_log("Processing failed, see console log for details");
					return false;
				}
				_log("Processing successfully finished.");
				
				var result = xm_converter.getGeneratedData();
				document.getElementById("output_instrument_titles").innerHTML = result.instrument_titles;
				document.getElementById("output_data").innerHTML = result.data_base64;
				document.getElementById("output_dictionary").innerHTML = result.dictionary_base64;
			}
*/
		</script>
		<style type="text/css">
			#log
			{
				position: fixed;
				bottom: 0;
				left: 0;
				right: 0;
				height: 100px;
				background: rgba(255,255,0,0.5);
				font-family: Tahoma, sans;
				font-size: 9pt;
				padding: 4px;
				overflow-y: scroll;
			}
			textarea
			{
				width: 100%;
				height: 100px;
				word-wrap: break-word;
			}
		</style>
	</head>
	<body>
		<div id="files">
			<input type="file" onchange="file_upload(this);" />
		</div>
		<input type="button" value="Process the loaded files" onclick="process_files(); return false;" /><br/>
		instrument titles:<br/>
		<textarea id="output_instrument_titles"></textarea>
		data:<br/>
		<textarea id="output_data"></textarea>
		dictionary:<br/>
		<textarea id="output_dictionary"></textarea>
		<div id="log"></div>
	</body>
</html>
